@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
@RestController
@RequestMapping("/api/v1/awards")
public class AwardController {
   private final AwardService awardService;

   @Autowired
   public AwardController(AwardService awardService) {
      this.awardService = awardService;
   }

   @GetMapping
   public List<Award> findAll() {
      return awardService.findAll();
   }

   @GetMapping("/{id}")
   public ResponseEntity<Award> findById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      return awardOptional.map(ResponseEntity::ok)
            .orElseGet(() -> ResponseEntity.notFound().build());
   }

   @PostMapping
   public ResponseEntity<Award> save(@RequestBody Award award) {
      Award savedAward = awardService.save(award);

      return ResponseEntity.ok(savedAward);
   }

   @PutMapping("/{id}")
   public ResponseEntity<Award> update(@PathVariable Long id, @RequestBody Award award) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         award.setId(id);
         Award updatedAward = awardService.save(award);

         return ResponseEntity.ok(updatedAward);
      } else {
         return ResponseEntity.notFound().build();
      }
   }

   @DeleteMapping("/{id}")
   public ResponseEntity<Void> deleteById(@PathVariable Long id) {
      Optional<Award> awardOptional = awardService.findById(id);

      if (awardOptional.isPresent()) {
         awardService.deleteById(id);

         return ResponseEntity.ok().build();
      } else {
         return ResponseEntity.notFound().build();
      }
   }
}
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.0.6</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.demoapp</groupId>
	<artifactId>demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>demo</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>20</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
